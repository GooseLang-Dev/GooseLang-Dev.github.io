name: Roadmap Automation

on:
  schedule:
    # Run daily at 8 AM Denver time (2 PM UTC)
    - cron: '0 14 * * *'
  workflow_dispatch: # Allow manual trigger

jobs:
  update-roadmap:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update roadmap todos
        env:
          GITHUB_TOKEN: ${{ secrets.ROADMAP_PAT }}
          PROJECT_NUMBER: ${{ vars.PROJECT_NUMBER }}
        run: |
          set -e  # Exit on error
          
          echo "🚀 Starting roadmap automation..."
          CURRENT_DATE=$(date +%Y-%m-%d)
          echo "Current date: $CURRENT_DATE"
          
          # ===============================================
          # STEP 1: FETCH PROJECT DATA
          # ===============================================
          
          echo "📊 Fetching project data..."
          
          QUERY='
          query($owner: String!, $number: Int!) {
            user(login: $owner) {
              projectV2(number: $number) {
                id
                items(first: 100) {
                  nodes {
                    id
                    fieldValues(first: 20) {
                      nodes {
                        ... on ProjectV2ItemFieldTextValue {
                          text
                          field {
                            ... on ProjectV2FieldCommon {
                              name
                            }
                          }
                        }
                        ... on ProjectV2ItemFieldDateValue {
                          date
                          field {
                            ... on ProjectV2FieldCommon {
                              name
                            }
                          }
                        }
                        ... on ProjectV2ItemFieldSingleSelectValue {
                          name
                          field {
                            ... on ProjectV2FieldCommon {
                              name
                            }
                          }
                        }
                      }
                    }
                    content {
                      ... on Issue {
                        title
                        number
                      }
                      ... on DraftIssue {
                        title
                      }
                    }
                  }
                }
                fields(first: 20) {
                  nodes {
                    ... on ProjectV2Field {
                      id
                      name
                    }
                    ... on ProjectV2SingleSelectField {
                      id
                      name
                      options {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }
          }'

          # Fetch data directly to file to avoid shell variable truncation
          gh api graphql -f query="$QUERY" -f owner="${GITHUB_REPOSITORY_OWNER}" -F number="${PROJECT_NUMBER}" > project_data.json
          
          # Validate JSON and project existence
          if ! jq empty project_data.json 2>/dev/null; then
            echo "❌ Error: Invalid JSON response received"
            exit 1
          fi
          
          if ! jq -e '.data.user.projectV2' project_data.json > /dev/null; then
            echo "❌ Error: Project not found"
            exit 1
          fi
          
          ITEM_COUNT=$(jq '.data.user.projectV2.items.nodes | length' project_data.json)
          echo "✅ Found $ITEM_COUNT project items"
          
          # ===============================================
          # STEP 2: EXTRACT FIELD IDs
          # ===============================================
          
          echo "🔍 Extracting field information..."
          
          STATUS_FIELD_ID=$(jq -r '.data.user.projectV2.fields.nodes[] | select(.name == "Status") | .id' project_data.json)
          DELAYED_OPTION_ID=$(jq -r '.data.user.projectV2.fields.nodes[] | select(.name == "Status") | .options[]? | select(.name == "Delayed") | .id' project_data.json)
          DUE_DATE_FIELD_ID=$(jq -r '.data.user.projectV2.fields.nodes[] | select(.name == "Due Date") | .id' project_data.json)
          START_DATE_FIELD_ID=$(jq -r '.data.user.projectV2.fields.nodes[] | select(.name == "Start Date") | .id' project_data.json)
          PROJECT_ID=$(jq -r '.data.user.projectV2.id' project_data.json)
          
          echo "📋 Field IDs extracted successfully"
          
          # ===============================================
          # STEP 3: IDENTIFY ITEMS TO UPDATE
          # ===============================================
          
          echo "🔎 Analyzing items for updates..."
          
          # Function to create item JSON
          create_item_json() {
            local item_id="$1" title="$2" due_date="$3" start_date="$4" status="$5" type="$6"
            jq -n \
              --arg item_id "$item_id" \
              --arg title "$title" \
              --arg due_date "$due_date" \
              --arg start_date "$start_date" \
              --arg current_status "$status" \
              --arg status_field_id "$STATUS_FIELD_ID" \
              --arg delayed_option_id "$DELAYED_OPTION_ID" \
              --arg due_date_field_id "$DUE_DATE_FIELD_ID" \
              --arg start_date_field_id "$START_DATE_FIELD_ID" \
              '{
                item_id: $item_id,
                title: $title,
                due_date: $due_date,
                start_date: $start_date,
                current_status: $current_status,
                status_field_id: $status_field_id,
                delayed_option_id: $delayed_option_id,
                due_date_field_id: $due_date_field_id,
                start_date_field_id: $start_date_field_id
              }'
          }
          
          # Function to update project field
          update_field() {
            local project_id="$1" item_id="$2" field_id="$3" value="$4" value_type="$5"
            
            if [ "$value_type" == "date" ]; then
              gh api graphql -f query='
                mutation($project_id: ID!, $item_id: ID!, $field_id: ID!, $value: Date!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $project_id
                    itemId: $item_id
                    fieldId: $field_id
                    value: { date: $value }
                  }) { projectV2Item { id } }
                }' \
                -f project_id="$project_id" \
                -f item_id="$item_id" \
                -f field_id="$field_id" \
                -f value="$value"
            else
              gh api graphql -f query='
                mutation($project_id: ID!, $item_id: ID!, $field_id: ID!, $value: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $project_id
                    itemId: $item_id
                    fieldId: $field_id
                    value: { singleSelectOptionId: $value }
                  }) { projectV2Item { id } }
                }' \
                -f project_id="$project_id" \
                -f item_id="$item_id" \
                -f field_id="$field_id" \
                -f value="$value"
            fi
          }
          
          # Initialize result arrays
          echo "[]" > overdue_items.json
          echo "[]" > todo_delayed_items.json  
          echo "[]" > inprogress_items.json
          
          # Process each item individually
          for i in $(seq 0 $((ITEM_COUNT-1))); do
            ITEM_DATA=$(jq ".data.user.projectV2.items.nodes[$i]" project_data.json)
            ITEM_ID=$(echo "$ITEM_DATA" | jq -r '.id')
            TITLE=$(echo "$ITEM_DATA" | jq -r '.content.title // "Draft"')
            
            # Extract field values
            DUE_DATE=$(echo "$ITEM_DATA" | jq -r '.fieldValues.nodes[] | select(.field.name == "Due Date") | .date // empty')
            START_DATE=$(echo "$ITEM_DATA" | jq -r '.fieldValues.nodes[] | select(.field.name == "Start Date") | .date // empty')
            STATUS=$(echo "$ITEM_DATA" | jq -r '.fieldValues.nodes[] | select(.field.name == "Status") | .name // empty')
            
            echo "Item $((i+1)): '$TITLE' - Status: $STATUS, Due: $DUE_DATE, Start: $START_DATE"
            
            # Categorize items based on conditions
            
            # 1. Overdue items (excluding specific statuses)
            if [[ -n "$DUE_DATE" && "$DUE_DATE" < "$CURRENT_DATE" && "$STATUS" != "Done" && "$STATUS" != "Delayed" && "$STATUS" != "Todo" && "$STATUS" != "In Progress" ]]; then
              echo "  → Overdue item (will change to Delayed)"
              NEW_ITEM=$(create_item_json "$ITEM_ID" "$TITLE" "$DUE_DATE" "$START_DATE" "$STATUS" "overdue")
              jq ". += [$NEW_ITEM]" overdue_items.json > temp.json && mv temp.json overdue_items.json
            fi
            
            # 2. Todo/Delayed items with past start dates
            if [[ -n "$START_DATE" && "$START_DATE" < "$CURRENT_DATE" && ("$STATUS" == "Todo" || "$STATUS" == "Delayed") ]]; then
              echo "  → $STATUS item with past start date"
              NEW_ITEM=$(create_item_json "$ITEM_ID" "$TITLE" "$DUE_DATE" "$START_DATE" "$STATUS" "todo_delayed")
              jq ". += [$NEW_ITEM]" todo_delayed_items.json > temp.json && mv temp.json todo_delayed_items.json
            fi
            
            # 3. In Progress items with past due dates
            if [[ -n "$DUE_DATE" && "$DUE_DATE" < "$CURRENT_DATE" && "$STATUS" == "In Progress" ]]; then
              echo "  → In Progress item with past due date"
              NEW_ITEM=$(create_item_json "$ITEM_ID" "$TITLE" "$DUE_DATE" "$START_DATE" "$STATUS" "inprogress")
              jq ". += [$NEW_ITEM]" inprogress_items.json > temp.json && mv temp.json inprogress_items.json
            fi
          done
          
          # ===============================================
          # STEP 4: UPDATE ITEMS
          # ===============================================
          
          # Update overdue items
          OVERDUE_COUNT=$(jq length overdue_items.json)
          if [ "$OVERDUE_COUNT" -gt 0 ]; then
            echo "⏰ Updating $OVERDUE_COUNT overdue items..."
            for i in $(seq 0 $((OVERDUE_COUNT-1))); do
              ITEM_ID=$(jq -r ".[$i].item_id" overdue_items.json)
              TITLE=$(jq -r ".[$i].title" overdue_items.json)
              
              echo "  Updating '$TITLE' to Delayed status..."
              update_field "$PROJECT_ID" "$ITEM_ID" "$STATUS_FIELD_ID" "$DELAYED_OPTION_ID" "status"
              
              if [ "$START_DATE_FIELD_ID" != "null" ]; then
                update_field "$PROJECT_ID" "$ITEM_ID" "$START_DATE_FIELD_ID" "$CURRENT_DATE" "date"
              fi
              
              if [ "$DUE_DATE_FIELD_ID" != "null" ]; then
                update_field "$PROJECT_ID" "$ITEM_ID" "$DUE_DATE_FIELD_ID" "$CURRENT_DATE" "date"
              fi
            done
          fi
          
          # Update Todo/Delayed items
          TODO_COUNT=$(jq length todo_delayed_items.json)
          if [ "$TODO_COUNT" -gt 0 ]; then
            echo "📝 Updating $TODO_COUNT Todo/Delayed items..."
            for i in $(seq 0 $((TODO_COUNT-1))); do
              ITEM_ID=$(jq -r ".[$i].item_id" todo_delayed_items.json)
              TITLE=$(jq -r ".[$i].title" todo_delayed_items.json)
              CURRENT_STATUS=$(jq -r ".[$i].current_status" todo_delayed_items.json)
              OLD_START_DATE=$(jq -r ".[$i].start_date" todo_delayed_items.json)
              OLD_DUE_DATE=$(jq -r ".[$i].due_date" todo_delayed_items.json)
              
              echo "  Updating $CURRENT_STATUS item '$TITLE'..."
              
              # Change Todo to Delayed, keep Delayed as Delayed
              if [ "$CURRENT_STATUS" == "Todo" ]; then
                echo "    Changing status to Delayed..."
                update_field "$PROJECT_ID" "$ITEM_ID" "$STATUS_FIELD_ID" "$DELAYED_OPTION_ID" "status"
              fi
              
              # Move dates proportionally
              if [ "$OLD_DUE_DATE" != "null" ] && [ -n "$OLD_DUE_DATE" ] && [ "$OLD_DUE_DATE" != "" ]; then
                DAYS_DIFF=$(( ($(date -d "$OLD_DUE_DATE" +%s) - $(date -d "$OLD_START_DATE" +%s)) / 86400 ))
                NEW_DUE_DATE=$(date -d "$CURRENT_DATE + $DAYS_DIFF days" +%Y-%m-%d)
                echo "    Moving dates proportionally (${DAYS_DIFF} days duration)"
              else
                NEW_DUE_DATE="$CURRENT_DATE"
                echo "    Setting due date to today (no original due date)"
              fi
              
              if [ "$START_DATE_FIELD_ID" != "null" ]; then
                update_field "$PROJECT_ID" "$ITEM_ID" "$START_DATE_FIELD_ID" "$CURRENT_DATE" "date"
              fi
              
              if [ "$DUE_DATE_FIELD_ID" != "null" ]; then
                update_field "$PROJECT_ID" "$ITEM_ID" "$DUE_DATE_FIELD_ID" "$NEW_DUE_DATE" "date"
              fi
            done
          fi
          
          # Update In Progress items
          INPROGRESS_COUNT=$(jq length inprogress_items.json)
          if [ "$INPROGRESS_COUNT" -gt 0 ]; then
            echo "🔄 Updating $INPROGRESS_COUNT In Progress items..."
            for i in $(seq 0 $((INPROGRESS_COUNT-1))); do
              ITEM_ID=$(jq -r ".[$i].item_id" inprogress_items.json)
              TITLE=$(jq -r ".[$i].title" inprogress_items.json)
              
              echo "  Extending due date for '$TITLE' to current date..."
              
              if [ "$DUE_DATE_FIELD_ID" != "null" ]; then
                update_field "$PROJECT_ID" "$ITEM_ID" "$DUE_DATE_FIELD_ID" "$CURRENT_DATE" "date"
              fi
            done
          fi
          
          # ===============================================
          # CLEANUP
          # ===============================================
          
          rm -f project_data.json overdue_items.json todo_delayed_items.json inprogress_items.json
          echo "✅ Roadmap automation completed successfully!"