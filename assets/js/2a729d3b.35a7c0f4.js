"use strict";(self.webpackChunkgooselang_docs=self.webpackChunkgooselang_docs||[]).push([[7815],{6360:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>t,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"data-structure/problem-records","title":"Problem Records","description":"\ud83d\udcd8 Overview","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/data-structure/problem-records.md","sourceDirName":"data-structure","slug":"/data-structure/problem-records","permalink":"/dev/data-structure/problem-records","draft":false,"unlisted":false,"editUrl":"https://github.com/GooseLang-Dev/gooselang.github.io/tree/main/i18n/en/docusaurus-plugin-content-docs/current/data-structure/problem-records.md","tags":[],"version":"current","lastUpdatedBy":"BruceWJ","lastUpdatedAt":1754286127000,"sidebarPosition":4,"frontMatter":{"title":"Problem Records","sidebar_position":4,"id":"problem-records"},"sidebar":"devSidebar","previous":{"title":"Question Data","permalink":"/dev/data-structure/question-data"},"next":{"title":"Task Data","permalink":"/dev/data-structure/task-data"}}');var i=s(4848),d=s(8453);const c={title:"Problem Records",sidebar_position:4,id:"problem-records"},l="Problem Records Data Structure & Model",t={},o=[{value:"\ud83d\udcd8 Overview",id:"-overview",level:2},{value:"\ud83d\udd17 Dependencies",id:"-dependencies",level:2},{value:"\ud83d\udcd0 Data Structures",id:"-data-structures",level:2},{value:"Record Document (<code>RecordDoc</code>)",id:"record-document-recorddoc",level:3},{value:"Field Explanations",id:"field-explanations",level:4},{value:"Record Statistics Document (<code>RecordStatDoc</code>)",id:"record-statistics-document-recordstatdoc",level:3},{value:"\u2699\ufe0f Core Methods &amp; Logic",id:"\ufe0f-core-methods--logic",level:2},{value:"add",id:"add",level:3},{value:"get",id:"get",level:3},{value:"getMulti",id:"getmulti",level:3},{value:"update",id:"update",level:3},{value:"updateMulti",id:"updatemulti",level:3},{value:"reset",id:"reset",level:3},{value:"judge",id:"judge",level:3},{value:"stat",id:"stat",level:3},{value:"getList",id:"getlist",level:3},{value:"count",id:"count",level:3},{value:"\ud83e\uddea Usage Patterns",id:"-usage-patterns",level:2},{value:"\ud83e\udde0 Code Review and Suggestions",id:"-code-review-and-suggestions",level:2},{value:"\ud83d\udcdd File Structure",id:"-file-structure",level:2},{value:"\ud83d\udccc Notes / Observations",id:"-notes--observations",level:2}];function a(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,d.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"problem-records-data-structure--model",children:"Problem Records Data Structure & Model"})}),"\n",(0,i.jsx)(n.h2,{id:"-overview",children:"\ud83d\udcd8 Overview"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"Problem Records"})," module in GooseLang is responsible for tracking, storing, and managing all user submissions (attempts) for language learning problems. Each record captures a user's attempt, including timing, scoring, and evaluation results. This module is essential for analytics, progress tracking, rejudging, and leaderboard/statistics features. It acts as the historical ledger of user activity on problems, supporting both individual and aggregate reporting."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note:"})," The judging and task queue logic in this module is currently incomplete and requires further development for robust, production-grade evaluation workflows. See the Code Review & Suggestions section for details."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-dependencies",children:"\ud83d\udd17 Dependencies"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"MongoDB"}),": All records are persisted in the ",(0,i.jsx)(n.code,{children:"record"})," and ",(0,i.jsx)(n.code,{children:"record.stat"})," collections."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Problem Model"})," (",(0,i.jsx)(n.code,{children:"problem.ts"}),"): Links each record to a specific problem."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"User Model"}),": Associates each record with a user."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Contest/Task System"}),": Integrates with contest logic and the task queue for judging (currently incomplete)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Space Model"}),": For multi-tenant (space) support."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Event Bus"}),": Listens for events (problem/space deletion, judging, etc.) to maintain data integrity."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Utilities"}),": Uses helpers for time, projection building, and argument handling."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-data-structures",children:"\ud83d\udcd0 Data Structures"}),"\n",(0,i.jsxs)(n.h3,{id:"record-document-recorddoc",children:["Record Document (",(0,i.jsx)(n.code,{children:"RecordDoc"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"Represents a single user submission for a problem."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export interface RecordDoc {\n    _id: ObjectId;                // Unique record ID\n    spaceId: string;              // Space/organization identifier\n    pid: number;                  // Problem ID\n    uid: number;                  // User ID\n    score: number;                // Final score for this attempt\n    pcid?: ObjectId;              // (Optional) Contest/problem collection ID\n    time?: number;                // Time spent on this attempt (ms)\n    startAt?: Array<Date>;        // Start timestamps for tracking progress\n    endAt?: Array<Date>;          // End timestamps for tracking progress\n    isJudged?: number;            // Judging status: -1 (not judged), 0 (partial), 1 (judged)\n    questionRecod?: any[];        // Array of question-level submission details (structure is flexible)\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"field-explanations",children:"Field Explanations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"_id"}),": MongoDB ObjectId, unique for each submission."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"spaceId"}),": Enables multi-tenant support; all queries are scoped by space."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"pid"}),": Links to the problem being attempted."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"uid"}),": The user making the submission."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"score"}),": The computed score for this attempt (after judging)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"pcid"}),": Used for contest or grouped problem attempts."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"time/startAt/endAt"}),": Used for analytics, time tracking, and progress visualization."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"isJudged"}),": Indicates judging status; important for UI and analytics."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"questionRecod"}),": Stores per-question details (answers, scores, etc.); currently loosely typed and should be standardized for future analytics."]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"record-statistics-document-recordstatdoc",children:["Record Statistics Document (",(0,i.jsx)(n.code,{children:"RecordStatDoc"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"Aggregates summary statistics for a user's attempts on a problem."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export interface RecordStatDoc {\n    _id: ObjectId;\n    spaceId: string;\n    pid: number;\n    uid: number;\n    time: number;\n    score: number;\n}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Used for leaderboards, analytics, and fast queries on user performance."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"\ufe0f-core-methods--logic",children:"\u2699\ufe0f Core Methods & Logic"}),"\n",(0,i.jsxs)(n.p,{children:["All methods are static on the ",(0,i.jsx)(n.code,{children:"RecordModel"})," class."]}),"\n",(0,i.jsx)(n.h3,{id:"add",children:"add"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Create a new record for a user attempt."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"add(spaceId: string, pid: number, uid: number, startAt: Date, pcid?: ObjectId): Promise<ObjectId>\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"spaceId"}),": Space/organization ID"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"pid"}),": Problem ID"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"uid"}),": User ID"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"startAt"}),": Start time of the attempt"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"pcid"}),": (Optional) Contest/problem collection ID"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," The ObjectId of the newly created record"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const recordId = await RecordModel.add('space123', 101, 42, new Date());\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Usage:"})," Called when a user starts a new attempt on a problem."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"get",children:"get"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Retrieve a record by its ObjectId (optionally scoped to a space)."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"get(_id: ObjectId): Promise<RecordDoc | null>\nget(spaceId: string, _id: ObjectId): Promise<RecordDoc | null>\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"_id"}),": Record ObjectId"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"spaceId"}),": (Optional) Space ID for scoping"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," The matching ",(0,i.jsx)(n.code,{children:"RecordDoc"})," or ",(0,i.jsx)(n.code,{children:"null"})," if not found"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const record = await RecordModel.get('space123', recordId);\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Usage:"})," Used in analytics, UI, and judging flows."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"getmulti",children:"getMulti"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Retrieve multiple records by query."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"getMulti(spaceId: string, query: any, options?: FindOptions): FindCursor<RecordDoc>\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"spaceId"}),": Space ID"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"query"}),": MongoDB query object"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"options"}),": (Optional) MongoDB find options"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," MongoDB cursor for matching records"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const cursor = RecordModel.getMulti('space123', { pid: 101 });\nconst records = await cursor.toArray();\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Usage:"})," Used for batch analytics, reporting, and admin tools."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"update",children:"update"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Update fields in a record (supports $set, $push, $unset, $inc)."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"update(spaceId: string, _id: MaybeArray<ObjectId>, $set?, $push?, $unset?, $inc?): Promise<RecordDoc | null>\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"spaceId"}),": Space ID"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"_id"}),": Single or array of ObjectIds"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"$set"}),", ",(0,i.jsx)(n.code,{children:"$push"}),", ",(0,i.jsx)(n.code,{children:"$unset"}),", ",(0,i.jsx)(n.code,{children:"$inc"}),": MongoDB update operators"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," Updated ",(0,i.jsx)(n.code,{children:"RecordDoc"})," or ",(0,i.jsx)(n.code,{children:"null"})]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"await RecordModel.update('space123', recordId, { score: 100, isJudged: 1 });\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Usage:"})," Used after judging, for progress updates, or admin corrections."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"updatemulti",children:"updateMulti"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Update multiple records matching a filter."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"updateMulti(spaceId: string, $match: Filter<RecordDoc>, $set?, $push?, $unset?): Promise<number>\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"spaceId"}),": Space ID"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"$match"}),": MongoDB filter"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"$set"}),", ",(0,i.jsx)(n.code,{children:"$push"}),", ",(0,i.jsx)(n.code,{children:"$unset"}),": MongoDB update operators"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," Number of modified records"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"await RecordModel.updateMulti('space123', { pid: 101 }, { score: 0 });\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Usage:"})," Bulk corrections, contest resets, or analytics."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"reset",children:"reset"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Reset a record for rejudging (clears score, status, etc.)."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"reset(spaceId: string, rid: MaybeArray<ObjectId>, isRejudge: boolean): Promise<RecordDoc | null>\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"spaceId"}),": Space ID"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"rid"}),": Single or array of ObjectIds"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"isRejudge"}),": Whether this is a rejudging operation"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," Updated ",(0,i.jsx)(n.code,{children:"RecordDoc"})," or ",(0,i.jsx)(n.code,{children:"null"})]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"await RecordModel.reset('space123', recordId, true);\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Usage:"})," Used when a problem is rejudged or test data changes."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"judge",children:"judge"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Queue records for judging (integration with task system)."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"judge(spaceId: string, rids: MaybeArray<ObjectId> | RecordDoc, priority = 0, config = {}, meta = {}): Promise<any>\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"spaceId"}),": Space ID"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"rids"}),": Record ObjectId(s) or RecordDoc(s)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"priority"}),": (Optional) Judging priority"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"config"}),": (Optional) Problem config overrides"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"meta"}),": (Optional) Judging metadata"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," Result of task queue operation (currently incomplete)"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"await RecordModel.judge('space123', recordId);\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Usage:"})," Called after a submission to trigger evaluation."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Warning:"})," The judging/task logic is incomplete and may not function as expected in production."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"stat",children:"stat"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Aggregate statistics for submissions over various time windows."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"stat(spaceId?: string): Promise<{ d5min, d1h, day, week, month, year, total }>\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"spaceId"}),": (Optional) Space ID"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," Object with counts for various time windows"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const stats = await RecordModel.stat('space123');\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Usage:"})," Used for dashboards, analytics, and reporting."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"getlist",children:"getList"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Retrieve a batch of records by IDs."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"getList(spaceId: string, rids: ObjectId[], fields?: (keyof RecordDoc)[]): Promise<Record<string, Partial<RecordDoc>>>\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"spaceId"}),": Space ID"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"rids"}),": Array of ObjectIds"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"fields"}),": (Optional) Fields to project"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," Map of record IDs to partial RecordDocs"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const records = await RecordModel.getList('space123', [recordId1, recordId2]);\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Usage:"})," Used in batch reporting, admin tools, and analytics."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"count",children:"count"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Count records matching a query."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"count(spaceId: string, query: any): Promise<number>\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"spaceId"}),": Space ID"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"query"}),": MongoDB query"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," Number of matching records"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const n = await RecordModel.count('space123', { pid: 101 });\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Usage:"})," Used for analytics, dashboards, and progress tracking."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-usage-patterns",children:"\ud83e\uddea Usage Patterns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Submission Flow:"})," When a user submits a solution, ",(0,i.jsx)(n.code,{children:"add"})," is called to create a record, then ",(0,i.jsx)(n.code,{children:"judge"})," is called to queue it for evaluation. After judging, ",(0,i.jsx)(n.code,{children:"update"})," is used to store results."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Analytics:"})," ",(0,i.jsx)(n.code,{children:"stat"}),", ",(0,i.jsx)(n.code,{children:"getMulti"}),", and ",(0,i.jsx)(n.code,{children:"count"})," are used for dashboards and reporting."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Rejudging:"})," ",(0,i.jsx)(n.code,{children:"reset"})," and ",(0,i.jsx)(n.code,{children:"judge"})," are used when problems or test data change."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cleanup:"})," Event listeners ensure records are deleted when problems or spaces are removed."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-code-review-and-suggestions",children:"\ud83e\udde0 Code Review and Suggestions"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Incomplete Judging/Task Logic:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The judging and task queue logic is not fully implemented. The ",(0,i.jsx)(n.code,{children:"judge"})," method and related task integration require significant development to support robust, asynchronous evaluation and result handling. This is a critical area for future work."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"questionRecod Field:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Currently typed as ",(0,i.jsx)(n.code,{children:"any[]"}),", which limits type safety and analytics. ",(0,i.jsx)(n.strong,{children:"Recommendation:"})," Define a strict schema/interface for question-level details to enable robust analytics and UI features."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Error Handling:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Some methods could benefit from more explicit error handling and validation, especially for partial updates and edge cases."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Dead Code/Legacy:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"No major dead code, but some TODOs and comments suggest future enhancements (e.g., deprecating certain config patterns)."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Indexing:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Indexes are well-defined for common queries, but as analytics grow, consider reviewing index coverage for new reporting needs."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Event Handling:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Event-driven cleanup is robust, but ensure all new features trigger appropriate events for data integrity."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Documentation:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Inline code comments are sparse in some areas. Consider adding more docstrings for complex logic."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-file-structure",children:"\ud83d\udcdd File Structure"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"src/model/record.ts"}),": Main model logic and event listeners"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"src/interface.ts"}),": TypeScript interfaces for ",(0,i.jsx)(n.code,{children:"RecordDoc"}),", ",(0,i.jsx)(n.code,{children:"RecordStatDoc"}),", and related types"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"record.stat"})," (MongoDB collection): Stores summary statistics"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"record"})," (MongoDB collection): Stores all submission records"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-notes--observations",children:"\ud83d\udccc Notes / Observations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Design Choice:"})," The separation of ",(0,i.jsx)(n.code,{children:"RecordDoc"})," and ",(0,i.jsx)(n.code,{children:"RecordStatDoc"})," enables both detailed and summary analytics."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Extensibility:"})," The model is designed for future analytics and reporting, but standardizing flexible fields (like ",(0,i.jsx)(n.code,{children:"questionRecod"}),") will be important."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Integration:"})," The module is tightly coupled with the problem, contest, and user systems, and is event-driven for data integrity."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Multi-Tenancy:"})," All queries are scoped by ",(0,i.jsx)(n.code,{children:"spaceId"})," for robust multi-tenant support."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance:"})," Indexes and batch operations are used for efficiency, but should be reviewed as usage patterns evolve."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Maintainability:"})," The codebase is modular and event-driven, but would benefit from stricter typing and more comprehensive inline documentation."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Critical TODO:"})," The judging/task queue logic must be completed and thoroughly tested before this module can be considered production-ready for evaluation workflows."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["For further details, see the source code in ",(0,i.jsx)(n.code,{children:"src/model/record.ts"})," and ",(0,i.jsx)(n.code,{children:"src/interface.ts"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>l});var r=s(6540);const i={},d=r.createContext(i);function c(e){const n=r.useContext(d);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),r.createElement(d.Provider,{value:n},e.children)}}}]);