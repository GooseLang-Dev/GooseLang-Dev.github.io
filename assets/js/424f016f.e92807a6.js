"use strict";(self.webpackChunkgooselang_docs=self.webpackChunkgooselang_docs||[]).push([[2110],{8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>a});var l=s(6540);const i={},r=l.createContext(i);function t(e){const n=l.useContext(r);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),l.createElement(r.Provider,{value:n},e.children)}},9547:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>o,frontMatter:()=>t,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"data-structure/lang-settings","title":"Language Settings","description":"\ud83d\udcd8 Overview","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/data-structure/lang-settings.md","sourceDirName":"data-structure","slug":"/data-structure/lang-settings","permalink":"/dev/data-structure/lang-settings","draft":false,"unlisted":false,"editUrl":"https://github.com/GooseLang-Dev/gooselang.github.io/tree/main/i18n/en/docusaurus-plugin-content-docs/current/data-structure/lang-settings.md","tags":[],"version":"current","lastUpdatedBy":"BruceWJ","lastUpdatedAt":1754286127000,"sidebarPosition":1,"frontMatter":{"title":"Language Settings","sidebar_position":1,"id":"lang-settings"},"sidebar":"devSidebar","previous":{"title":"Data Structure","permalink":"/dev/category/data-structure"},"next":{"title":"Problem Data","permalink":"/dev/data-structure/problem-data"}}');var i=s(4848),r=s(8453);const t={title:"Language Settings",sidebar_position:1,id:"lang-settings"},a="Language Data Structure & Model",d={},c=[{value:"\ud83d\udcd8 Overview",id:"-overview",level:2},{value:"\ud83d\udd17 Dependencies",id:"-dependencies",level:2},{value:"\ud83d\udcd0 Data Structures",id:"-data-structures",level:2},{value:"Doc Type Constants",id:"doc-type-constants",level:3},{value:"System Languages Document (<code>SystemLangsDoc</code>)",id:"system-languages-document-systemlangsdoc",level:3},{value:"Space Languages Document (<code>SpaceLangsDoc</code>)",id:"space-languages-document-spacelangsdoc",level:3},{value:"Language Setting Document (<code>LangSettingDoc</code>)",id:"language-setting-document-langsettingdoc",level:3},{value:"Level Setting Document (<code>LevelSettingDoc</code>)",id:"level-setting-document-levelsettingdoc",level:3},{value:"\u2699\ufe0f Core Methods &amp; Logic",id:"\ufe0f-core-methods--logic",level:2},{value:"get",id:"get",level:3},{value:"getMultiLangInfo",id:"getmultilanginfo",level:3},{value:"getLangInfo",id:"getlanginfo",level:3},{value:"getAvailableLangs",id:"getavailablelangs",level:3},{value:"getMultiLevelInfo",id:"getmultilevelinfo",level:3},{value:"getLangLevel",id:"getlanglevel",level:3},{value:"initiate",id:"initiate",level:3},{value:"addLang",id:"addlang",level:3},{value:"updateLang",id:"updatelang",level:3},{value:"deleteLang",id:"deletelang",level:3},{value:"addType",id:"addtype",level:3},{value:"updateType",id:"updatetype",level:3},{value:"deleteType",id:"deletetype",level:3},{value:"getLevels",id:"getlevels",level:3},{value:"addLevel",id:"addlevel",level:3},{value:"updateLevel",id:"updatelevel",level:3},{value:"deleteLevels",id:"deletelevels",level:3},{value:"getProblemTags",id:"getproblemtags",level:3},{value:"\ud83e\uddea Usage Patterns",id:"-usage-patterns",level:2},{value:"\ud83e\udde0 Code Review and Suggestions",id:"-code-review-and-suggestions",level:2},{value:"\ud83d\udcdd File Structure",id:"-file-structure",level:2},{value:"\ud83d\udccc Notes / Observations",id:"-notes--observations",level:2}];function g(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"language-data-structure--model",children:"Language Data Structure & Model"})}),"\n",(0,i.jsx)(n.h2,{id:"-overview",children:"\ud83d\udcd8 Overview"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"Language Settings"})," module in GooseLang manages all language-related configuration, metadata, and logic for the platform. It enables system-wide and per-space (organization) language management, including language types (e.g., Listening, Speaking), proficiency levels, and custom tags. This module is foundational for supporting multilingual content, adaptive learning, and fine-grained progress tracking across different learning scenarios."]}),"\n",(0,i.jsx)(n.h2,{id:"-dependencies",children:"\ud83d\udd17 Dependencies"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"MongoDB"}),": All language settings are stored in the ",(0,i.jsx)(n.code,{children:"language_setting"})," collection."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Space Model"}),": Associates language settings with specific spaces (organizations, groups)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Problem Model"}),": Problems reference language, type, and level settings for categorization and analytics."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"TypeScript Interfaces"}),": Uses types from ",(0,i.jsx)(n.code,{children:"@interface.ts"})," for strong typing and schema enforcement."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Utilities"}),": Uses helpers for argument handling and projection building."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-data-structures",children:"\ud83d\udcd0 Data Structures"}),"\n",(0,i.jsx)(n.h3,{id:"doc-type-constants",children:"Doc Type Constants"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export const TYPE_SYSTEM_LANGS: 7121 = 7121;\nexport const TYPE_LANG_SETTING: 7122 = 7122;\nexport const TYPE_SPACE_LANGS: 7123 = 7123;\nexport const TYPE_LEVEL_SETTING: 7124 = 7124;\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Used to distinguish document roles in the ",(0,i.jsx)(n.code,{children:"language_setting"})," collection."]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"system-languages-document-systemlangsdoc",children:["System Languages Document (",(0,i.jsx)(n.code,{children:"SystemLangsDoc"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"Stores the default set of languages available platform-wide."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export interface SystemLangsDoc {\n    _id: ObjectId;\n    docType: typeof TYPE_SYSTEM_LANGS; // 7121\n    availableLangCodes: string[];\n    defaultLangCodes: string[];\n    langs: Array<{\n        langCode: string;\n        isCustom: boolean;\n        langName: string;\n        langTypes: LangSettingDoc['langTypes'];\n    }>;\n}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"availableLangCodes"}),": All language codes available in the system."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"defaultLangCodes"}),": Default language codes for new spaces."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"langs"}),": Array of language definitions, each with types and tags."]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"space-languages-document-spacelangsdoc",children:["Space Languages Document (",(0,i.jsx)(n.code,{children:"SpaceLangsDoc"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"Tracks the language configuration for a specific space."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export interface SpaceLangsDoc {\n    _id: ObjectId;\n    docType: typeof TYPE_SPACE_LANGS; // 7123\n    spaceId: string;\n    problemPrefix: string;\n    currentLangs: string[];\n    availableLangs: string[];\n    customLangs: string[];\n}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"currentLangs"}),": Languages currently enabled in the space."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"availableLangs"}),": Languages available to be enabled."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"customLangs"}),": Custom (user-defined) language codes for the space."]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"language-setting-document-langsettingdoc",children:["Language Setting Document (",(0,i.jsx)(n.code,{children:"LangSettingDoc"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"Stores detailed configuration for a specific language in a space."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export interface LangSettingDoc {\n    _id: ObjectId;\n    docType: typeof TYPE_LANG_SETTING; // 7122\n    spaceId: string;\n    isCustom: boolean;\n    langCode: string;\n    langName: string;\n    langTypes: Array<{\n        typeId: ObjectId;\n        typeCode: string; // L, S, R, W, V, G\n        typeName: string;\n        tags: string[];\n    }>;\n}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"langTypes"}),": Each type (e.g., Listening, Speaking) can have custom tags (e.g., 'Dialogues', 'Fill in blanks')."]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"level-setting-document-levelsettingdoc",children:["Level Setting Document (",(0,i.jsx)(n.code,{children:"LevelSettingDoc"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"Defines proficiency levels for a language, including point distributions and scoring rules per type."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export interface LevelSettingDoc {\n    _id: ObjectId;\n    docType: typeof TYPE_LEVEL_SETTING; // 7124\n    spaceId: string;\n    targetLangId: ObjectId; // References LangSettingDoc._id\n    levelName: string;\n    totalPoint: number;\n    requiredPoint: number;\n    typePoints: Array<{\n        typeId: ObjectId;\n        typeName: string;\n        typeCode: string;\n        percentage: number;\n        typePoint: {\n            correct: number;\n            wrong: number;\n        };\n    }>;\n}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"typePoints"}),": For each language type, defines its weight (percentage) and scoring for correct/wrong answers."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"\ufe0f-core-methods--logic",children:"\u2699\ufe0f Core Methods & Logic"}),"\n",(0,i.jsxs)(n.p,{children:["All methods are static on the ",(0,i.jsx)(n.code,{children:"LanguageModel"})," class."]}),"\n",(0,i.jsx)(n.h3,{id:"get",children:"get"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Retrieve all language settings, codes, and levels for a space."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"get(spaceId: string): Promise<{ langSet: LangSettingDoc[]; langCodes: string[]; langLevel: LevelSettingDoc[] }>\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"spaceId"}),": Space/organization ID"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," Object with arrays of language settings, codes, and levels"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const { langSet, langCodes, langLevel } = await LanguageModel.get('space123');\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Usage:"})," Used to initialize language settings in UI and backend."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"getmultilanginfo",children:"getMultiLangInfo"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," List all languages for UI selection."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"getMultiLangInfo(spaceId: string): Promise<Array<{ _id: ObjectId, langName: string, langCode: string }>>\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"spaceId"}),": Space/organization ID"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," Array of language IDs, names, and codes"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const langs = await LanguageModel.getMultiLangInfo('space123');\n"})}),"\n",(0,i.jsx)(n.h3,{id:"getlanginfo",children:"getLangInfo"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Get detailed info for a specific language."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"getLangInfo(spaceId: string, targetLangId: ObjectId): Promise<LangSettingDoc>\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"spaceId"}),": Space/organization ID"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"targetLangId"}),": Language ObjectId"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," The language setting document"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const lang = await LanguageModel.getLangInfo('space123', langId);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"getavailablelangs",children:"getAvailableLangs"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," List available language codes for a space."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"getAvailableLangs(spaceId: string): Promise<string[]>\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"spaceId"}),": Space/organization ID"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," Array of language codes"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"getmultilevelinfo",children:"getMultiLevelInfo"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," List all levels for a language."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"getMultiLevelInfo(spaceId: string, targetLangId: ObjectId): Promise<Array<{ _id: ObjectId, levelName: string }>>\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"spaceId"}),": Space/organization ID"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"targetLangId"}),": Language ObjectId"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," Array of level IDs and names"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"getlanglevel",children:"getLangLevel"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Get a specific level's configuration for a language."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"getLangLevel(spaceId: string, targetLangId: ObjectId, levelId: ObjectId): Promise<LevelSettingDoc>\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"spaceId"}),": Space/organization ID"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"targetLangId"}),": Language ObjectId"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"levelId"}),": Level ObjectId"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," The level setting document"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"initiate",children:"initiate"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Initialize language system for a new space (creates system and space docs if missing)."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"initiate(spaceId: string): Promise<{ langSet: LangSettingDoc[]; langCodes: string[]; langLevel: LevelSettingDoc[] }>\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"spaceId"}),": Space/organization ID"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," Object with arrays of language settings, codes, and levels"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Usage:"})," Called when a new space is created."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"addlang",children:"addLang"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Add a new language (system or custom) to a space."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"addLang(spaceId: string, langName: string, langTypes: TypeInfo[]): Promise<LangSettingDoc>\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"spaceId"}),": Space/organization ID"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"langName"}),": Name of the language"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"langTypes"}),": Array of type definitions (see Data Structures)"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," The new language setting document"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"updatelang",children:"updateLang"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Update language metadata (name, code, custom flag)."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"updateLang(_id: ObjectId, spaceId: string, update: Partial<{ isCustom: boolean; langCode: string; langName: string; }>): Promise<LangSettingDoc>\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"_id"}),": Language ObjectId"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"spaceId"}),": Space/organization ID"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"update"}),": Partial update object"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," The updated language setting document"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"deletelang",children:"deleteLang"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Remove a language and its levels from a space."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"deleteLang(spaceId: string, _id: ObjectId): Promise<void>\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"spaceId"}),": Space/organization ID"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"_id"}),": Language ObjectId"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"addtype",children:"addType"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Add a new type (e.g., 'L', 'S') to a language."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"addType(_id: ObjectId, typeCode: string): Promise<LangSettingDoc>\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"_id"}),": Language ObjectId"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"typeCode"}),": Type code (e.g., 'L' for Listening)"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," The updated language setting document"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"updatetype",children:"updateType"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Update a type's name, code, or tags."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"updateType(_id: ObjectId, typeId: ObjectId, update: Partial<{ typeName: string; typeCode: string; tags: string[]; }>): Promise<LangSettingDoc>\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"_id"}),": Language ObjectId"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"typeId"}),": Type ObjectId"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"update"}),": Partial update object"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," The updated language setting document"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"deletetype",children:"deleteType"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Remove a type from a language."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"deleteType(_id: ObjectId, typeId: ObjectId): Promise<LangSettingDoc>\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"_id"}),": Language ObjectId"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"typeId"}),": Type ObjectId"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," The updated language setting document"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"getlevels",children:"getLevels"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," List all levels for a language."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"getLevels(spaceId: string, targetLangId: ObjectId): Promise<LevelSettingDoc[]>\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"spaceId"}),": Space/organization ID"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"targetLangId"}),": Language ObjectId"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," Array of level setting documents"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"addlevel",children:"addLevel"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Add a new level to a language."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"addLevel(spaceId: string, targetLangId: ObjectId, levelCount: number): Promise<LevelSettingDoc>\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"spaceId"}),": Space/organization ID"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"targetLangId"}),": Language ObjectId"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"levelCount"}),": Level number (for naming and scoring)"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," The new level setting document"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"updatelevel",children:"updateLevel"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Update level configuration (name, points, type weights)."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"updateLevel(spaceId: string, levelId: ObjectId, levelName: string, totalPoint: number, requiredPoint: number, percentage: { [key: string]: number }, typePoints: Array<{ typeCode: string; correct: number; wrong: number }>): Promise<any>\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"spaceId"}),": Space/organization ID"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"levelId"}),": Level ObjectId"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"levelName"}),": Name of the level"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"totalPoint"}),": Total points for the level"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"requiredPoint"}),": Points required to pass"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"percentage"}),": Mapping of typeCode to percentage"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"typePoints"}),": Array of scoring rules per type"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," Update result"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"deletelevels",children:"deleteLevels"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Remove all levels for a language."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"deleteLevels(spaceId: string, targetLangId: ObjectId): Promise<void>\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"spaceId"}),": Space/organization ID"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"targetLangId"}),": Language ObjectId"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"getproblemtags",children:"getProblemTags"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Retrieve tags for all types in a language (for problem creation UI)."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"getProblemTags(spaceId: string, targetlangId: ObjectId): Promise<Record<string, string[]>>\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"spaceId"}),": Space/organization ID"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"targetlangId"}),": Language ObjectId"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," Object mapping type names to tag arrays"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-usage-patterns",children:"\ud83e\uddea Usage Patterns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Space Initialization:"})," When a new space is created, ",(0,i.jsx)(n.code,{children:"initiate"})," is called to set up default languages, types, and levels."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Problem Authoring:"})," When creating a problem, language, type, and level are selected from the settings managed here."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"UI Integration:"})," Language and level lists are fetched for dropdowns and filters."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Analytics:"})," Level and type data are used for progress tracking and reporting."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-code-review-and-suggestions",children:"\ud83e\udde0 Code Review and Suggestions"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Validation:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Some methods (e.g., ",(0,i.jsx)(n.code,{children:"addLang"}),", ",(0,i.jsx)(n.code,{children:"updateLang"}),") have complex logic for code uniqueness and custom handling. Consider extracting validation logic for clarity and reuse."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Error Handling:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Most methods throw descriptive errors, but some could benefit from more granular error types or user-facing messages."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type Safety:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"langTypes"})," and ",(0,i.jsx)(n.code,{children:"typePoints"})," arrays are well-typed, but some dynamic object construction (e.g., in ",(0,i.jsx)(n.code,{children:"updateLevel"}),") could be further type-checked."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Logging:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["There are some ",(0,i.jsx)(n.code,{children:"console.log"})," statements for debugging. Consider using a structured logger or removing these in production."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Indexing:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Ensure MongoDB indexes are maintained for frequent queries on ",(0,i.jsx)(n.code,{children:"spaceId"}),", ",(0,i.jsx)(n.code,{children:"docType"}),", and ",(0,i.jsx)(n.code,{children:"langCode"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Documentation:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Inline code comments are present but could be expanded for complex flows (e.g., language code collision handling)."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Extensibility:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The model is designed for extensibility, but as new language features are added, review schema changes for backward compatibility."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-file-structure",children:"\ud83d\udcdd File Structure"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"src/model/language.ts"}),": Main model logic and static methods"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"src/interface.ts"}),": TypeScript interfaces for all language-related documents"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"language_setting"})," (MongoDB collection): Stores all language, type, and level documents"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-notes--observations",children:"\ud83d\udccc Notes / Observations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Design Choice:"})," The separation of system, space, language, and level documents enables flexible, multi-tenant language management."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Multi-Tenancy:"})," All queries are scoped by ",(0,i.jsx)(n.code,{children:"spaceId"})," for robust support of multiple organizations or groups."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Custom vs. System Languages:"})," The model supports both system-defined and custom languages, with logic to prevent code collisions."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Tagging:"})," Tags are first-class citizens for each type, enabling rich filtering and UI experiences."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Level Logic:"})," Level scoring and type weighting are configurable per language, supporting adaptive learning paths."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Maintainability:"})," The codebase is modular and event-driven, but would benefit from stricter typing and more comprehensive inline documentation as features grow."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["For further details, see the source code in ",(0,i.jsx)(n.code,{children:"src/model/language.ts"})," and ",(0,i.jsx)(n.code,{children:"src/interface.ts"}),"."]})]})}function o(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(g,{...e})}):g(e)}}}]);