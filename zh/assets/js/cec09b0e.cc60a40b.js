"use strict";(self.webpackChunkgooselang_docs=self.webpackChunkgooselang_docs||[]).push([[3202],{8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>r});var t=i(6540);const s={},l=t.createContext(s);function a(e){const n=t.useContext(l);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(l.Provider,{value:n},e.children)}},9351:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>g,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"plugin/plugin","title":"Plugin Summary","description":"The GooseLang backend is built as a plugin-based framework using the Cordis dependency-injection framework, enabling modular and extensible design for language learning platform services.","source":"@site/dev/plugin/plugin.md","sourceDirName":"plugin","slug":"/plugin/","permalink":"/zh/dev/plugin/","draft":false,"unlisted":false,"editUrl":"https://github.com/GooseLang-Dev/gooselang.github.io/tree/main/dev/plugin/plugin.md","tags":[],"version":"current","lastUpdatedBy":"BruceWJ","lastUpdatedAt":1754286127000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1,"id":"plugin","title":"Plugin Summary"},"sidebar":"devSidebar","previous":{"title":"Plugin Development","permalink":"/zh/dev/category/plugin-development"},"next":{"title":"GooseNLP \u67b6\u6784\u8bbe\u8ba1","permalink":"/zh/dev/plugin/goosenlp-architecture"}}');var s=i(4848),l=i(8453);const a={sidebar_position:1,id:"plugin",title:"Plugin Summary"},r="GooseLang Plugin Architecture",o={},c=[{value:"Plugin Structure",id:"plugin-structure",level:2},{value:"Basic Plugin Template",id:"basic-plugin-template",level:3},{value:"Core Plugins Integration",id:"core-plugins-integration",level:3},{value:"Event System",id:"event-system",level:2},{value:"Application Lifecycle Events",id:"application-lifecycle-events",level:3},{value:"User Events",id:"user-events",level:3},{value:"Content Events",id:"content-events",level:3},{value:"WebSocket Integration",id:"websocket-integration",level:2},{value:"Translation Service Integration",id:"translation-service-integration",level:3},{value:"Speech Synthesis Integration",id:"speech-synthesis-integration",level:3},{value:"WebSocket Message Types",id:"websocket-message-types",level:3},{value:"Authentication Plugins",id:"authentication-plugins",level:2},{value:"Built-in Authentication",id:"built-in-authentication",level:3},{value:"OAuth Integration Plugins",id:"oauth-integration-plugins",level:3},{value:"Storage Backend Plugins",id:"storage-backend-plugins",level:2},{value:"CLI Plugin Operations",id:"cli-plugin-operations",level:2},{value:"Plugin Development Guidelines",id:"plugin-development-guidelines",level:2},{value:"Handler Development",id:"handler-development",level:3},{value:"Model Development",id:"model-development",level:3},{value:"Plugin Architecture Benefits",id:"plugin-architecture-benefits",level:2}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"gooselang-plugin-architecture",children:"GooseLang Plugin Architecture"})}),"\n",(0,s.jsxs)(n.p,{children:["The GooseLang backend is built as a ",(0,s.jsx)(n.strong,{children:"plugin-based framework"})," using the Cordis dependency-injection framework, enabling modular and extensible design for language learning platform services."]}),"\n",(0,s.jsx)(n.h2,{id:"plugin-structure",children:"Plugin Structure"}),"\n",(0,s.jsx)(n.h3,{id:"basic-plugin-template",children:"Basic Plugin Template"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"export default {\n  name: 'plugin-name',\n  schema: ConfigSchema,\n  apply: (ctx: Context, config: Config) => {\n    // Plugin initialization\n    ctx.on('event-name', handler);\n    ctx.command('command-name', handler);\n  }\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"core-plugins-integration",children:"Core Plugins Integration"}),"\n",(0,s.jsx)(n.p,{children:"The GooseLang ecosystem includes several essential plugins:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Framework Plugin"}),": HTTP server and routing (",(0,s.jsx)(n.code,{children:"@gooselang/framework"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Database Plugin"}),": MongoDB connection and ORM-like interface"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Storage Plugin"}),": File upload and static content serving"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Worker Plugin"}),": Background task processing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Server Plugin"}),": Request handling and middleware stack"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"event-system",children:"Event System"}),"\n",(0,s.jsx)(n.p,{children:"The plugin system relies on a comprehensive event bus for inter-plugin communication:"}),"\n",(0,s.jsx)(n.h3,{id:"application-lifecycle-events",children:"Application Lifecycle Events"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"'app/started'     // Application startup complete\n'app/ready'       // All plugins loaded\n'app/exit'        // Graceful shutdown\n"})}),"\n",(0,s.jsx)(n.h3,{id:"user-events",children:"User Events"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"'user/message'    // User messaging\n'user/import/*'   // User data import\n"})}),"\n",(0,s.jsx)(n.h3,{id:"content-events",children:"Content Events"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"'problem/add'     // Problem creation\n'training/add'    // Training course creation\n'record/change'   // Submission status change\n"})}),"\n",(0,s.jsx)(n.h2,{id:"websocket-integration",children:"WebSocket Integration"}),"\n",(0,s.jsx)(n.p,{children:"Real-time communication plugins for language learning:"}),"\n",(0,s.jsx)(n.h3,{id:"translation-service-integration",children:"Translation Service Integration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// WebSocket communication with translation engines\n'goosetranslator' plugin:\n- LibreTranslate integration (primary)\n- Google Translate (planned)\n- Bing Translator (planned)\n- Real-time translation progress\n- Batch translation processing\n"})}),"\n",(0,s.jsx)(n.h3,{id:"speech-synthesis-integration",children:"Speech Synthesis Integration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// WebSocket communication with TTS engines\n'goosesynthesizer' plugin:\n- Text-to-speech processing\n- Multiple voice options\n- Real-time audio generation\n- Progress tracking and delivery\n"})}),"\n",(0,s.jsx)(n.h3,{id:"websocket-message-types",children:"WebSocket Message Types"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// WebSocket message types\n'synthesis/progress'    // Text-to-speech progress updates\n'translation/result'    // Real-time translation results\n'homework/notification' // Assignment notifications\n'training/progress'     // Course progress updates\n"})}),"\n",(0,s.jsx)(n.h2,{id:"authentication-plugins",children:"Authentication Plugins"}),"\n",(0,s.jsx)(n.p,{children:"Multiple authentication strategies through plugins:"}),"\n",(0,s.jsx)(n.h3,{id:"built-in-authentication",children:"Built-in Authentication"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"'password'        // Username/password with hashing\n'tfa'            // Two-factor authentication (TOTP)\n'webauthn'       // WebAuthn/FIDO2 support\n"})}),"\n",(0,s.jsx)(n.h3,{id:"oauth-integration-plugins",children:"OAuth Integration Plugins"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"'login-with-github'  // GitHub OAuth\n'login-with-google'  // Google OAuth\n"})}),"\n",(0,s.jsx)(n.h2,{id:"storage-backend-plugins",children:"Storage Backend Plugins"}),"\n",(0,s.jsx)(n.p,{children:"Support for multiple storage systems through plugin architecture:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Storage configuration\n'local'    // Local filesystem storage\n's3'       // AWS S3 compatible storage\n'gridfs'   // MongoDB GridFS storage\n"})}),"\n",(0,s.jsx)(n.h2,{id:"cli-plugin-operations",children:"CLI Plugin Operations"}),"\n",(0,s.jsx)(n.p,{children:"The GooseLang CLI provides plugin management capabilities:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Plugin management\ngooselang addon list              # List installed plugins\ngooselang db migrate              # Run database migrations\n\n# Plugin development\ngooselang script rating '{\"uid\": 1}' # Run rating calculation\ngooselang execute 'system.get(\"version\")' # Execute code\n"})}),"\n",(0,s.jsx)(n.h2,{id:"plugin-development-guidelines",children:"Plugin Development Guidelines"}),"\n",(0,s.jsx)(n.h3,{id:"handler-development",children:"Handler Development"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Example plugin handler implementation\nclass MyHandler extends Handler {\n  @param('id', Types.ObjectId)\n  async get(spaceId: string, id: ObjectId) {\n    // Check permissions\n    this.checkPerm(PERM.PERM_VIEW);\n    \n    // Get data from model\n    const doc = await MyModel.get(spaceId, id);\n    if (!doc) throw new DocumentNotFoundError(id);\n    \n    // Apply rate limiting\n    await this.limitRate('view', 60, 100);\n    \n    // Return response\n    this.response.body = { doc };\n    this.response.template = 'my_page.html';\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"model-development",children:"Model Development"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Example plugin model implementation\nexport class MyModel {\n  static async get(spaceId: string, id: ObjectId): Promise<MyDoc | null> {\n    return await coll.findOne({ spaceId, _id: id });\n  }\n  \n  static async add(spaceId: string, data: Partial<MyDoc>): Promise<ObjectId> {\n    const doc = { ...data, spaceId, _id: new ObjectId() };\n    await coll.insertOne(doc);\n    return doc._id;\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"plugin-architecture-benefits",children:"Plugin Architecture Benefits"}),"\n",(0,s.jsx)(n.p,{children:"The plugin-based architecture provides:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Modularity"}),": Independent feature development and deployment"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Extensibility"}),": Easy addition of new functionality through plugins"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Maintainability"}),": Isolated code bases for different features"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Reusability"}),": Plugins can be shared across different GooseLang instances"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Testability"}),": Individual plugin testing and validation"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"This plugin summary covers the core plugin architecture of GooseLang, enabling developers to understand and extend the platform's capabilities through the modular plugin system."})})]})}function g(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);